#!/bin/bash

# TODO: Wrap long text, decide output format according to Terminal Lines and Cols.
# TODO: Better way to print stuff, echo is UGLY. Major FLAW.

FREEMEM=`free | awk '/^Mem:/{print $4}'`

TermColors=`tput colors` # Note: tput results only reflects the terminal's color compatibility; Old shells ( like bash on OS X ) with an `echo` without a `-e` flag can still cause troubles. Well, we are using Linux and a new version of bash..
Cols=`tput cols`
Lines=`tput lines`

#if [ TermColors == 256 ] # I need someone to choose a suitable color. http://misc.flogisoft.com/bash/tip_colors_and_formatting
                          # How are you supposed to make sure that (even) Konsole defaults to 256-color terminal?
  #then
    #BLUE=
    #CYAN=
  #else
    BLUE="\e[36m" # TODO: Choose a better one...
                  # Don't get me wrong, just want it to be easier to read on a terminal, not to be accurate.
    RED="\e[31m"
    LGRAY="\e[37m"
#fi
wrap_text() { # Lots of TODOs! We need to change the way the script displays the information if we really want the wrap.
  echo "$@" # This is a stub.
}

# Kernel=`wrap_text uname -r` # Oh that long long name...
# WHAT ARE YOU TALKING ABOUT HERE...

Kernel=`uname -r | cut -f1 -d "-"`
# That would be shorter wouldn't it...

# TODO: move everything that may be really long to a variable so that the wrap_text() function can easily wrap and change them.
echo -e "${BLUE}                                                     
                                                  
                             77777777                                 ${RED}Distribution: ${LGRAY}`lsb_release -i | cut -c17-`${BLUE}
                             777777777777.                            
                             7777777777777777                         ${RED}Processor: ${LGRAY}`cat /proc/cpuinfo | grep 'model name' | head -n1 | cut -c14- | cut -f1 -d "@"`${BLUE}
                             77777777777777777              
                             7777777777777777777                      ${RED}Architecture: ${LGRAY}`uname -m`${BLUE}
                              77777777777777777777           
          77                       7777777777777777                   ${RED}Kernel: ${LGRAY}${Kernel}${BLUE}
         777777                      777777777777777          
        7777777777                    77777777777777.                 ${RED}Uptime: ${LGRAY}`cat /proc/uptime | grep -o '^[0-9]\+'` Seconds${BLUE}
       7777777777777                   77777777777777         
      .777777777777                     7777777777777.                ${RED}Free RAM: ${LGRAY}`expr $FREEMEM / 1024` MiB${BLUE}
      7777777777777                     7777777777777.         
      7777777777777                     7777777777777.                ${RED}Shell: ${LGRAY}`echo $SHELL`${BLUE}
      7777777777777                     7777777777777         
      7777777777777                     7777777777777                 ${RED}User: ${LGRAY}`whoami`${BLUE}
      7777777777777                    7777777777777         
      777777777777777                    7777777777                   ${RED}Free Space on / : ${LGRAY}`df -h / | awk '/[0-9]%/{print $(NF-2)}' | rev | cut -b 2- | rev` GiB${BLUE}
       777777777777777                       7777          
        7777777777777777                                              ${RED}Free Space on /home : ${LGRAY}`df -h /home | awk '/[0-9]%/{print $(NF-2)}' | rev | cut -b 2- | rev` GiB${BLUE}
         777777777777777777777                              
          777777777777777777777                                       ${RED}Temporary Files Size: ${LGRAY}`du -sh -m /tmp 2>/dev/null | awk '{print $1}' | rev | cut -b 1- | rev` MiB${BLUE}
           ..777777777777777777                             
             .77777777777777777                                       ${RED}Log Files Size: ${LGRAY}`du -sh -m /var/log 2>/dev/null | awk '{print $1}' | rev | cut -b 1- | rev` MiB${BLUE}
               .777777777777777                             
                 .7777777777777                                       ${RED}DPKG Database Size: ${LGRAY}`du -sh -m /var/lib/dpkg 2>/dev/null | awk '{print $1}' | rev | cut -b 1- | rev` MiB${BLUE}
                      777777777                             

                                                                      \e[0m"
